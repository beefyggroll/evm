import sys
import re
import math
from typing import List, Tuple
import numpy as np
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QRadioButton, QLineEdit, QPushButton, QLabel, QTextEdit,
                             QFileDialog, QMessageBox, QGroupBox, QSlider)
from PyQt5.QtCore import Qt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.ticker as ticker


class PlotCanvas(FigureCanvas):
    def __init__(self, parent=None, width=5, height=4, dpi=100):
        self.fig = Figure(figsize=(width, height), dpi=dpi)
        super().__init__(self.fig)
        self.setParent(parent)
        
        self.axes = self.fig.add_subplot(111)
        self._setup_axes()
        self.fixed_xlim = (-200, 200)
        self.fixed_ylim = (-200, 200)
        self.axes.set_xlim(self.fixed_xlim)
        self.axes.set_ylim(self.fixed_ylim)
        self._update_ticks()
        
        self.current_function = ""
        self.is_analytical = True
        self.tabular_data = None

    def _setup_axes(self):
        """Настройка базового вида (без делений)"""
        self.axes.grid(True, linestyle='--', alpha=0.7)
        self.axes.axhline(y=0, color='k', linewidth=1)
        self.axes.axvline(x=0, color='k', linewidth=1)
        self.axes.set_xlabel('X')
        self.axes.set_ylabel('Y')
        self.axes.set_aspect('equal')

    def _update_ticks(self):
        """Автоматическая настройка шага и формата делений"""
        xlim = self.axes.get_xlim()
        ylim = self.axes.get_ylim()
        x_range = xlim[1] - xlim[0]
        y_range = ylim[1] - ylim[0]

        def round_step(value):
            if value <= 0:
                return 1.0
            log_val = math.floor(math.log10(value))
            mantissa = value / (10 ** log_val)
            if mantissa <= 1:
                return 1 * (10 ** log_val)
            elif mantissa <= 2:
                return 2 * (10 ** log_val)
            elif mantissa <= 5:
                return 5 * (10 ** log_val)
            else:
                return 10 * (10 ** log_val)

        x_step = round_step(x_range / 8)
        y_step = round_step(y_range / 8)

        self.axes.xaxis.set_major_locator(ticker.MultipleLocator(x_step))
        self.axes.yaxis.set_major_locator(ticker.MultipleLocator(y_step))
        self.axes.xaxis.set_major_formatter(ticker.FormatStrFormatter('%.3f'))
        self.axes.yaxis.set_major_formatter(ticker.FormatStrFormatter('%.3f'))

    def get_view_params(self):
        xlim = self.axes.get_xlim()
        ylim = self.axes.get_ylim()
        center_x = (xlim[0] + xlim[1]) / 2
        center_y = (ylim[0] + ylim[1]) / 2
        scale = (xlim[1] - xlim[0]) / 20.0
        return center_x, center_y, scale

    def set_view(self, offset_x, offset_y, scale):
        x_range = 20.0 * scale
        y_range = 20.0 * scale
        self.axes.set_xlim(offset_x - x_range/2, offset_x + x_range/2)
        self.axes.set_ylim(offset_y - y_range/2, offset_y + y_range/2)
        self._update_ticks()
        self.draw()

    def plot_analytical_function(self, function_str: str):
        try:
            self.axes.clear()
            self._setup_axes()
            self.axes.set_xlim(self.fixed_xlim)
            self.axes.set_ylim(self.fixed_ylim)
            self._update_ticks()

            expr = function_str.strip()
            expr = re.sub(r'\bln\s*\(', 'log(', expr)
            expr = expr.replace('^', '**')

            def real_cbrt(z):
                return np.sign(z) * np.abs(z) ** (1/3)

            expr = re.sub(r'(.+?)\s*\*\*\s*\(?\s*1\s*/\s*3\s*\)?', r'real_cbrt(\1)', expr)

            x = np.linspace(-50, 50, 4000)
            local_dict = {
                'x': x,
                'np': np,
                'sin': np.sin,
                'cos': np.cos,
                'tan': np.tan,
                'exp': np.exp,
                'log': np.log,
                'log10': np.log10,
                'sqrt': np.sqrt,
                'abs': np.abs,
                'pi': np.pi,
                'e': np.e,
                'cbrt': np.cbrt,
                'real_cbrt': real_cbrt
            }

            import warnings
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                y = eval(expr, {"__builtins__": {}}, local_dict)

            y = np.where(np.isinf(y) | np.isnan(y), np.nan, y)
            y_view_range = self.axes.get_ylim()[1] - self.axes.get_ylim()[0]
            if y_view_range > 0:
                threshold = 10 * y_view_range
                y = np.where(np.abs(y) > threshold, np.nan, y)
                dy = np.diff(y, prepend=y[0])
                jump_threshold = 5 * y_view_range
                large_jumps = np.abs(dy) > jump_threshold
                y = np.where(large_jumps, np.nan, y)

            valid = ~np.isnan(y)
            if np.any(valid):
                segments = []
                start = None
                for i, is_valid in enumerate(valid):
                    if is_valid and start is None:
                        start = i
                    elif not is_valid and start is not None:
                        segments.append((start, i))
                        start = None
                if start is not None:
                    segments.append((start, len(valid)))
                for s, e in segments:
                    self.axes.plot(x[s:e], y[s:e], 'r-', linewidth=2)

            self.axes.set_title(f'График функции: {function_str}')
            self.current_function = function_str
            self.is_analytical = True
            self.draw()

        except Exception as e:
            raise ValueError(f"Ошибка построения: {str(e)}")

    def plot_tabular_function(self, points: List[Tuple[float, float]]):
        try:
            self.axes.clear()
            self._setup_axes()
            self.axes.set_xlim(self.fixed_xlim)
            self.axes.set_ylim(self.fixed_ylim)
            self._update_ticks()

            if not points:
                raise ValueError("Нет данных")

            x_vals = [p[0] for p in points]
            y_vals = [p[1] for p in points]
            sorted_points = sorted(zip(x_vals, y_vals), key=lambda p: p[0])
            x_sorted, y_sorted = zip(*sorted_points)

            self.axes.plot(x_sorted, y_sorted, 'b-', linewidth=1, alpha=0.7)
            self.axes.plot(x_sorted, y_sorted, 'bo', markersize=3)
            self.axes.set_title('Табличная функция')
            self.tabular_data = points
            self.is_analytical = False
            self.draw()

        except Exception as e:
            raise ValueError(f"Ошибка табличной функции: {str(e)}")

    def reset_view(self):
        self.axes.clear()
        self._setup_axes()
        self.axes.set_xlim(self.fixed_xlim)
        self.axes.set_ylim(self.fixed_ylim)
        self._update_ticks()
        self.axes.set_title('График функции')
        self.draw()


class FunctionPlotter(QMainWindow):
    def __init__(self):
        super().__init__()
        self.tabular_points = []
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle('Function Plotter - Построитель графиков')
        self.setGeometry(100, 100, 1200, 700)

        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QHBoxLayout(central_widget)

        control_panel = QWidget()
        control_panel.setFixedWidth(320)
        control_layout = QVBoxLayout(control_panel)

        # Тип функции
        type_group = QGroupBox("Тип функции:")
        type_layout = QVBoxLayout(type_group)
        self.radio_analytical = QRadioButton("Аналитическая функция")
        self.radio_tabular = QRadioButton("Табличная функция")
        self.radio_analytical.setChecked(True)
        type_layout.addWidget(self.radio_analytical)
        type_layout.addWidget(self.radio_tabular)

        # Аналитическая функция
        function_group = QGroupBox("Формула:")
        function_layout = QVBoxLayout(function_group)
        self.txt_function = QLineEdit("x^(1/3)")
        self.txt_function.setPlaceholderText("Например: x^(1/3), 1/x, ln(x)")
        function_layout.addWidget(QLabel("Функция:"))
        function_layout.addWidget(self.txt_function)

        # Примеры
        examples_group = QGroupBox("Примеры:")
        examples_layout = QVBoxLayout(examples_group)
        examples = ["x^(1/3)", "1/x", "tan(x)", "ln(x)", "x^2", "sin(x)"]
        for ex in examples:
            btn = QPushButton(ex)
            btn.clicked.connect(lambda _, e=ex: self.txt_function.setText(e))
            examples_layout.addWidget(btn)

        # Кнопки
        self.btn_plot = QPushButton("Построить график")
        self.btn_plot.setStyleSheet("background-color: #4682B4; color: white;")
        self.btn_load_file = QPushButton("Загрузить TXT файл")
        self.btn_load_file.setStyleSheet("background-color: #32CD32; color: white;")
        self.btn_load_file.setEnabled(False)
        self.btn_reset = QPushButton("Сбросить вид")
        self.btn_reset.setStyleSheet("background-color: #FFA500; color: white;")

        # Масштаб
        scale_group = QGroupBox("Масштаб:")
        scale_layout = QVBoxLayout(scale_group)
        self.slider_scale = QSlider(Qt.Horizontal)
        self.slider_scale.setRange(1, 10000)  # 0.001 до 10.0
        self.slider_scale.setValue(1000)       # 1.0
        self.slider_scale.valueChanged.connect(self.on_scale_changed)
        self.label_scale = QLabel("Масштаб: 1.000")
        scale_layout.addWidget(self.label_scale)
        scale_layout.addWidget(self.slider_scale)

        # Перемещение
        pan_group = QGroupBox("Перемещение:")
        pan_layout = QVBoxLayout(pan_group)
        self.slider_pan_x = QSlider(Qt.Horizontal)
        self.slider_pan_x.setRange(-2000, 2000)
        self.slider_pan_x.setValue(0)
        self.slider_pan_x.valueChanged.connect(self.on_pan_x_changed)
        self.slider_pan_y = QSlider(Qt.Horizontal)
        self.slider_pan_y.setRange(-2000, 2000)
        self.slider_pan_y.setValue(0)
        self.slider_pan_y.valueChanged.connect(self.on_pan_y_changed)
        pan_layout.addWidget(QLabel("По X:"))
        pan_layout.addWidget(self.slider_pan_x)
        pan_layout.addWidget(QLabel("По Y:"))
        pan_layout.addWidget(self.slider_pan_y)

        # Содержимое файла
        self.txt_file_content = QTextEdit()
        self.txt_file_content.setReadOnly(True)
        self.txt_file_content.setMaximumHeight(150)
        self.txt_file_content.setVisible(False)

        format_group = QGroupBox("Формат TXT:")
        format_layout = QVBoxLayout(format_group)
        format_layout.addWidget(QLabel("Пары чисел через пробел/запятую.\nКаждая пара — новая строка."))

        # Сборка
        control_layout.addWidget(type_group)
        control_layout.addWidget(function_group)
        control_layout.addWidget(examples_group)
        control_layout.addWidget(self.btn_plot)
        control_layout.addWidget(self.btn_load_file)
        control_layout.addWidget(self.btn_reset)
        control_layout.addWidget(scale_group)
        control_layout.addWidget(pan_group)
        control_layout.addWidget(format_group)
        control_layout.addWidget(QLabel("Содержимое файла:"))
        control_layout.addWidget(self.txt_file_content)
        control_layout.addStretch()

        self.plot_canvas = PlotCanvas(self, width=8, height=6)
        main_layout.addWidget(control_panel)
        main_layout.addWidget(self.plot_canvas)

        # Сигналы
        self.radio_analytical.toggled.connect(self.on_function_type_changed)
        self.btn_plot.clicked.connect(self.on_plot_clicked)
        self.btn_load_file.clicked.connect(self.on_load_file_clicked)
        self.btn_reset.clicked.connect(self.on_reset_clicked)

    def on_function_type_changed(self):
        is_analytical = self.radio_analytical.isChecked()
        self.txt_function.setEnabled(is_analytical)
        self.btn_load_file.setEnabled(not is_analytical)
        self.txt_file_content.setVisible(not is_analytical)

    def on_plot_clicked(self):
        try:
            if self.radio_analytical.isChecked():
                self.plot_canvas.plot_analytical_function(self.txt_function.text())
            else:
                if not self.tabular_points:
                    raise ValueError("Сначала загрузите файл")
                self.plot_canvas.plot_tabular_function(self.tabular_points)
        except Exception as e:
            QMessageBox.critical(self, "Ошибка", str(e))

    def on_load_file_clicked(self):
        try:
            path, _ = QFileDialog.getOpenFileName(self, "TXT файл", "", "Text files (*.txt)")
            if path:
                self.load_tabular_data(path)
        except Exception as e:
            QMessageBox.critical(self, "Ошибка", str(e))

    def on_reset_clicked(self):
        self.plot_canvas.reset_view()
        self.slider_pan_x.setValue(0)
        self.slider_pan_y.setValue(0)
        self.slider_scale.setValue(1000)
        self.label_scale.setText("Масштаб: 1.000")

    def on_scale_changed(self, value):
        scale = value / 1000.0
        self.label_scale.setText(f"Масштаб: {scale:.3f}")
        cx, cy, _ = self.plot_canvas.get_view_params()
        self.plot_canvas.set_view(cx, cy, scale)

    def on_pan_x_changed(self, value):
        offset_x = value / 100.0
        _, cy, scale = self.plot_canvas.get_view_params()
        self.plot_canvas.set_view(offset_x, cy, scale)

    def on_pan_y_changed(self, value):
        offset_y = value / 100.0
        cx, _, scale = self.plot_canvas.get_view_params()
        self.plot_canvas.set_view(cx, offset_y, scale)

    def load_tabular_data(self, file_path: str):
        self.tabular_points = []
        lines_out = []
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if not line or line.startswith(('#', '//')):
                        continue
                    parts = re.split(r'[\s,;]+', line)
                    nums = []
                    for p in parts:
                        p = p.strip().replace(',', '.')
                        if p:
                            try:
                                nums.append(float(p))
                            except:
                                pass
                    if len(nums) >= 2:
                        self.tabular_points.append((nums[0], nums[1]))
                        lines_out.append(f"{nums[0]:.4f} {nums[1]:.4f}")
            if not self.tabular_points:
                raise ValueError("Нет валидных данных")
            self.txt_file_content.setText('\n'.join(lines_out))
        except Exception as e:
            raise ValueError(f"Ошибка файла: {e}")


def main():
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    window = FunctionPlotter()
    window.show()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
